//generator client {
//  provider = "prisma-client-js"
//  previewFeatures = ["fullTextSearch"]
//}

//datasource db {
//  provider = "sqlite"
//  url      = "file:./dev.db"
//}

generator client {
  provider = "prisma-client-js"
}


// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Books   UserJoinBook[] 
  Movies  UserJoinMovie[]
}

model Book {
  id Int @id @default(autoincrement())
  name String
  image_url String? @default("No image found")
  synopsis String? @default("No synopsis")
  author String?
  book_url String @unique
  Users UserJoinBook[]
  Tags TagJoinBook[]
}

model Movie {
  id Int @id @default(autoincrement())
  name String
  image_url String? @default("No image found")
  synopsis String? @default("No synopsis")
  director String?
  movie_url String @unique
  Users UserJoinMovie[]
}

model UserJoinMovie {
  assignedAt DateTime @default(now())
  Rating Int @default(5)//TODO: put a constraint to limit this by 5
  Review String? @default("")
  Likes Int @default(0)
  user User @relation(fields: [userId], references: [id])
  userId Int
  movie Movie @relation(fields: [movieId], references: [id])
  movieId Int
  @@id([userId, movieId])
}



model UserJoinBook {
  assignedAt DateTime @default(now())
  Rating Int @default(5)//TODO: put a constraint to limit this by 5
  Review String? @default("")

  user User @relation(fields: [userId], references: [id])
  userId Int
  book Book @relation(fields: [bookId], references: [id])
  bookId Int

  @@id([userId, bookId])
}

model Tag {
  id Int @id @default(autoincrement())
  tagsName String
  Books TagJoinBook[]
} 

model TagJoinBook {
  user Tag @relation(fields: [tagId], references: [id])
  tagId Int
  book Book @relation(fields: [bookId], references: [id])
  bookId Int

    @@id([tagId, bookId])
}